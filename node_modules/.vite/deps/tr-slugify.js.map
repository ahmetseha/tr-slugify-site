{
  "version": 3,
  "sources": ["../../tr-slugify/dist/index.js"],
  "sourcesContent": ["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.trSlugify = trSlugify;\nexports.trSlugifyMultiple = trSlugifyMultiple;\nexports.trSlugifyUnique = trSlugifyUnique;\n/**\n * Türkçe karakterleri İngilizce karşılıklarına çeviren harita\n */\nconst TURKISH_CHAR_MAP = {\n    ç: \"c\",\n    Ç: \"C\",\n    ğ: \"g\",\n    Ğ: \"G\",\n    ı: \"i\",\n    I: \"I\",\n    İ: \"I\",\n    ö: \"o\",\n    Ö: \"O\",\n    ş: \"s\",\n    Ş: \"S\",\n    ü: \"u\",\n    Ü: \"U\",\n};\n/**\n * Türkçe metni URL-friendly slug'a çevirir\n * @param text - Çevrilecek metin\n * @param options - Slugify seçenekleri\n * @returns URL-friendly slug\n */\nfunction trSlugify(text, options = {}) {\n    const { separator = \"-\", lowercase = true, removeSpecialChars = true, collapseSeparators = true, trimSeparators = true, } = options;\n    if (!text || typeof text !== \"string\") {\n        return \"\";\n    }\n    let result = text;\n    // Türkçe karakterleri çevir\n    for (const [turkishChar, englishChar] of Object.entries(TURKISH_CHAR_MAP)) {\n        result = result.replace(new RegExp(turkishChar, \"g\"), englishChar);\n    }\n    // Küçük harfe çevir\n    if (lowercase) {\n        result = result.toLowerCase();\n    }\n    // Özel karakterleri kaldır veya ayırıcıya çevir\n    if (removeSpecialChars) {\n        // Alfanumerik olmayan karakterleri ayırıcıya çevir\n        result = result.replace(/[^a-zA-Z0-9\\s]/g, separator);\n    }\n    // Boşlukları ayırıcıya çevir\n    result = result.replace(/\\s+/g, separator);\n    // Çoklu ayırıcıları tek ayırıcıya çevir\n    if (collapseSeparators) {\n        const separatorRegex = new RegExp(`${escapeRegExp(separator)}+`, \"g\");\n        result = result.replace(separatorRegex, separator);\n    }\n    // Başındaki ve sonundaki ayırıcıları kaldır\n    if (trimSeparators) {\n        const separatorRegex = new RegExp(`^${escapeRegExp(separator)}+|${escapeRegExp(separator)}+$`, \"g\");\n        result = result.replace(separatorRegex, \"\");\n    }\n    return result;\n}\n/**\n * Regex özel karakterlerini escape eder\n * @param string - Escape edilecek string\n * @returns Escape edilmiş string\n */\nfunction escapeRegExp(string) {\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n}\n/**\n * Birden fazla metni slug'a çevirir\n * @param texts - Çevrilecek metinler dizisi\n * @param options - Slugify seçenekleri\n * @returns Slug'lar dizisi\n */\nfunction trSlugifyMultiple(texts, options = {}) {\n    return texts.map((text) => trSlugify(text, options));\n}\n/**\n * Metni slug'a çevirir ve benzersiz olmasını sağlar\n * @param text - Çevrilecek metin\n * @param existingSlugs - Mevcut slug'lar dizisi\n * @param options - Slugify seçenekleri\n * @returns Benzersiz slug\n */\nfunction trSlugifyUnique(text, existingSlugs = [], options = {}) {\n    let slug = trSlugify(text, options);\n    let counter = 1;\n    let uniqueSlug = slug;\n    while (existingSlugs.includes(uniqueSlug)) {\n        uniqueSlug = `${slug}-${counter}`;\n        counter++;\n    }\n    return uniqueSlug;\n}\n// Varsayılan export\nexports.default = trSlugify;\n"],
  "mappings": ";;;;;AAAA;AAAA;AACA,WAAO,eAAe,SAAS,cAAc,EAAE,OAAO,KAAK,CAAC;AAC5D,YAAQ,YAAY;AACpB,YAAQ,oBAAoB;AAC5B,YAAQ,kBAAkB;AAI1B,QAAM,mBAAmB;AAAA,MACrB,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACP;AAOA,aAAS,UAAU,MAAM,UAAU,CAAC,GAAG;AACnC,YAAM,EAAE,YAAY,KAAK,YAAY,MAAM,qBAAqB,MAAM,qBAAqB,MAAM,iBAAiB,KAAM,IAAI;AAC5H,UAAI,CAAC,QAAQ,OAAO,SAAS,UAAU;AACnC,eAAO;AAAA,MACX;AACA,UAAI,SAAS;AAEb,iBAAW,CAAC,aAAa,WAAW,KAAK,OAAO,QAAQ,gBAAgB,GAAG;AACvE,iBAAS,OAAO,QAAQ,IAAI,OAAO,aAAa,GAAG,GAAG,WAAW;AAAA,MACrE;AAEA,UAAI,WAAW;AACX,iBAAS,OAAO,YAAY;AAAA,MAChC;AAEA,UAAI,oBAAoB;AAEpB,iBAAS,OAAO,QAAQ,mBAAmB,SAAS;AAAA,MACxD;AAEA,eAAS,OAAO,QAAQ,QAAQ,SAAS;AAEzC,UAAI,oBAAoB;AACpB,cAAM,iBAAiB,IAAI,OAAO,GAAG,aAAa,SAAS,CAAC,KAAK,GAAG;AACpE,iBAAS,OAAO,QAAQ,gBAAgB,SAAS;AAAA,MACrD;AAEA,UAAI,gBAAgB;AAChB,cAAM,iBAAiB,IAAI,OAAO,IAAI,aAAa,SAAS,CAAC,KAAK,aAAa,SAAS,CAAC,MAAM,GAAG;AAClG,iBAAS,OAAO,QAAQ,gBAAgB,EAAE;AAAA,MAC9C;AACA,aAAO;AAAA,IACX;AAMA,aAAS,aAAa,QAAQ;AAC1B,aAAO,OAAO,QAAQ,uBAAuB,MAAM;AAAA,IACvD;AAOA,aAAS,kBAAkB,OAAO,UAAU,CAAC,GAAG;AAC5C,aAAO,MAAM,IAAI,CAAC,SAAS,UAAU,MAAM,OAAO,CAAC;AAAA,IACvD;AAQA,aAAS,gBAAgB,MAAM,gBAAgB,CAAC,GAAG,UAAU,CAAC,GAAG;AAC7D,UAAI,OAAO,UAAU,MAAM,OAAO;AAClC,UAAI,UAAU;AACd,UAAI,aAAa;AACjB,aAAO,cAAc,SAAS,UAAU,GAAG;AACvC,qBAAa,GAAG,IAAI,IAAI,OAAO;AAC/B;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAEA,YAAQ,UAAU;AAAA;AAAA;",
  "names": []
}
